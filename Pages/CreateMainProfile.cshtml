@page
@model SCCPP1.Pages.CreateMainProfileModel
@{
    ViewData["Title"] = "Create Main Profile";
}

<!-- This page is used to create the user's profile. Will only be seen once upon inital login. -->
<style>
    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    * {
        box-sizing: border-box;
    }

    input[type=text], select, textarea {
        width: 100%;
        padding: 12px;
        border: 1px solid #000000;
        border-radius: 4px;
        box-sizing: border-box;
        margin-top: 6px;
        margin-bottom: 16px;
        resize: vertical;
    }

    label > .required {
        color: red;
        display: none;
    }

    input:required + label > .required {
        display: inline;
    }

    /* Div class styling for tag system*/
    .tags-input {
        width: 100%;
        padding: 12px;
        border: 1px solid #000000;
        border-radius: 4px;
        box-sizing: border-box;
        margin-top: 6px;
        margin-bottom: 16px;
        resize: vertical;
    }

        .tags-input input {
            border: 1px solid #000000;
            outline: none;
            width: 100%;
        }

    .tags-list {
        margin: 0;
        padding: 0;
        list-style: none;
        display: flex;
        flex-wrap: wrap;
    }

    .tag {
        background-color: #f2f2f2;
        padding: 5px;
        border-radius: 5px;
        margin-right: 5px;
        margin-bottom: 5px;
        display: flex;
        align-items: center;
    }

        .tag span {
            margin-left: 5px;
            margin-right: 5px;
        }

        .tag i {
            cursor: pointer;
        }

    /* Submit button styling*/
    input[type=submit] {
        background-color: #00868B;
        color: white;
        padding: 12px 20px;
        border: 1px solid #00868B;
        border-radius: 4px;
        cursor: pointer;
    }

        input[type=submit]:hover {
            background-color: #7E94CB;
            color: white;
            border: 1px solid #7E94CB;
        }

    .profile {
        border-radius: 5px;
        background-color: white;
        padding: 20px;
    }

    /* Experience configurable list styling */
    #experience-list ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    #experience-list li {
        margin: 10px;
        padding: 10px;
        border: 1px solid black;
    }

    /* Education configurable list styling */
    #education-list ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    #education-list li {
        margin: 10px;
        padding: 10px;
        border: 1px solid black;
    }

    /* Certification configurable list styling */
    #certification-list ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    #certification-list li {
        margin: 10px;
        padding: 10px;
        border: 1px solid black;
    }

</style>
<body style="background-image: url(https://www.teamsparq.com/wp-content/themes/rural-sourcing/assets/images/backgrounds/pattern-gradient.jpg)">
    <h1 style="color: white; text-align: center;">CREATE YOUR MAIN PROFILE</h1>
    <br />
    <div class="profile">
        <form method="post" id="myForm" style="background-image: url(https://www.teamsparq.com/wp-content/themes/rural-sourcing/assets/images/backgrounds/stars-light-left.svg)">
            <legend><b>About:</b></legend>

            <label for="FirstName">First Name:*</label>
            <input type="text" asp-for="Colleague!.FirstName" placeholder="Ex: John" required />
            <br />

            <label for="LastName">Last Name:*</label>
            <input type="text" asp-for="Colleague!.LastName" placeholder="Ex: Doe" required />
            <br />

            <label for="MiddleName">Middle Name:</label>
            <input type="text" asp-for="Colleague!.MiddleName" placeholder="Ex: Bob" />
            <br />

            <label for="PhoneNumber">Phone:*</label>
            <input type="tel" asp-for="Colleague!.PhoneNumber" placeholder="Ex: (987)-654-3210" required />
            <br />
            <br />

            <label for="EmailAddress">Email Address:*</label>
            <input type="email" asp-for="Colleague!.EmailAddress" placeholder="Ex: jdoe@example.com" required />
            <br />
            <br />

            <label for="IntroNarrative">About:</label>
            <textarea type="text" asp-for="Colleague!.IntroNarrative" placeholder="Introduce yourself..." style="height:200px"></textarea>
            <br />

            <legend><b>Skills:</b></legend>

            <label for="ProgLang">Programming Languages:</label>
            <div class="tags-input">
                <input type="text" class="tags-input-field" data-list-selector="#prog-lang-list" placeholder="What languages do you know?... (Press enter to save)" onkeydown="onKeyPL(event)" />
                <input type="text" asp-for="Skill!.ProgLang" style="display:none;" />
                @Html.HiddenFor(m => m.Skill.ProgLang, new { id = "prog-lang-input" })
                <ul class="tags-list" id="prog-lang-list"></ul>
            </div>
            <br />

            <label for="OS">Operating Systems:</label>
            <div class="tags-input">
                <input type="text" class="tags-input-field" data-list-selector="#op-sys-list" placeholder="What operating systems do you know?... (Press enter to save)" onkeydown="onKeyOS(event)" />
                <input type="text" asp-for="Skill!.OS" style="display:none;" />
                @Html.HiddenFor(m => m.Skill.OS, new { id = "op-sys-input" })
                <ul class="tags-list" id="op-sys-list"></ul>
            </div>
            <br />

            <label for="SoftAndFrame">Software & Frameworks:</label>
            <div class="tags-input">
                <input type="text" class="tags-input-field" data-list-selector="#soft-frame-list" placeholder="What software suites and frameworks are you familiar with?... (Press enter to save)" onkeydown="onKeySNF(event)" />
                <input type="text" asp-for="Skill!.SoftAndFrame" style="display:none;" />
                @Html.HiddenFor(m => m.Skill.SoftAndFrame, new { id = "soft-frame-input" })
                <ul class="tags-list" id="soft-frame-list"></ul>
            </div>
            <br />

            <label for="Other">Other:</label>
            <div class="tags-input">
                <input type="text" class="tags-input-field" data-list-selector="#other-list" placeholder="What other relevent skills do you have?... (Press enter to save)" onkeydown="onKeyO(event)" />
                <input type="text" asp-for="Skill!.Other" style="display:none;" />
                @Html.HiddenFor(m => m.Skill.Other, new { id = "other-input" })
                <ul class="tags-list" id="other-list"></ul>
            </div>
            <br />


            <legend><b>Experience:</b></legend>

            <div id="experience-list">
                <label for="Employer">Employer:</label>
                <input type="text" asp-for="Work!.Employer" placeholder="Company Name">

                <label for="JobTitle">Job Title:</label>
                <input type="text" asp-for="Work!.JobTitle" placeholder="Position">

                <label for="StartDate">Start Date:</label>
                <input type="date" asp-for="Work!.StartDate">

                <label for="EndDate">End Date:</label>
                <input type="date" asp-for="Work!.EndDate">

                <label for="present-checkbox">Current:</label>
                <input type="checkbox" id="present-checkbox">

                <button type="button" onclick="addExperience()">Add Experience</button>
                <ul id="experience-ul">
                </ul>
                <br />
                <button type="button" onclick="removeLastExperience()">Remove Last Experience</button>

                <!-- Hidden input to store experience data -->
                @Html.HiddenFor(m => m.Work.Experience, new { id = "hidden-experience-list" })

            </div>
            <br />
            <br />

            <legend><b>Education:</b></legend>

            <div id="education-list">
                <label for="Institution"> Institution: </label>
                <input type="text" asp-for="Education!.Institution" placeholder="University Name">

                <label for="Degree">Degree:</label>
                <input type="text" asp-for="Education!.Degree" placeholder="Degree Earned Ex: (Bachelors, Masters, PHD)">

                <label for="Field">Field:</label>
                <input type="text" asp-for="Education!.Field" placeholder="Subject Of Degree Ex: (Computer Science, CyberSecurity)">

                <label for="StartDate">Start Date:</label>
                <input type="date" asp-for="Education!.StartDate">

                <label for="EndDate">End Date:</label>
                <input type="date" asp-for="Education!.EndDate">

                <label for="currently-checkbox">Current:</label>
                <input type="checkbox" id="currently-checkbox">

                <button type="button" onclick="addEducation()">Add Education</button>
                <ul id="education-ul">
                </ul>
                <br />
                <button type="button" onclick="removeLastEducation()">Remove Last Education</button>
                <!-- Hidden input to store experience data -->
                @Html.HiddenFor(m => m.Education.Value, new { id = "hidden-education-list" })

            </div>

            <br />
            <br />

            <legend><b>Certification:</b></legend>

            <div id="certification-list">
                <label for="Institution"> Institution: </label>
                <input type="text" asp-for="Certification!.Institution" placeholder="Certifier's Name">

                <label for="Certificate">Certificate:</label>
                <input type="text" asp-for="Certification!.Certificate" placeholder="Name of Certificate Earned">

                <label for="StartDate">Start Date:</label>
                <input type="date" asp-for="Certification!.StartDate">

                <label for="EndDate">End Date:</label>
                <input type="date" asp-for="Certification!.EndDate">

                <label for="current-checkbox">Current:</label>
                <input type="checkbox" id="current-checkbox">

                <button type="button" onclick="addCertification()">Add Certification</button>
                <ul id="certification-ul">
                </ul>
                <br />
                <button type="button" onclick="removeLastCertification()">Remove Last Certification</button>
                @Html.HiddenFor(m => m.Certification.Value, new { id = "hidden-certification-list" })
            </div>

            <br />
            <br />

            <input type="submit" value="Submit" />
            <input type="submit" value="Save as Draft">
        </form>
    </div>

</body>

<!-- Input tag script-->

<script>

    // Function triggered when a key is pressed down
    function onKeyPL(event) {
        // Check if the Enter key was pressed
        if (event.keyCode === 13) {
            event.preventDefault(); // Prevent form submission

            // Gets the input element and the list element from data attributes
            const input = event.target;
            const listSelector = input.getAttribute("data-list-selector");
            const list = document.querySelector(listSelector);

            // Creates a new tag element and add it to the list
            const tag = document.createElement("li");
            tag.classList.add("tag");
            tag.textContent = input.value;

            // Creates a button to remove the tag and add it to the tag element
            const xButton = document.createElement("button");
            xButton.classList.add("tag-close-btn");
            xButton.innerHTML = "&times;";
            xButton.addEventListener("click", function () {
                const tagToRemove = this.parentNode;
                tagToRemove.parentNode.removeChild(tagToRemove);
                updateHiddenInput(list); // Update hidden input after removing the tag
            });
            tag.appendChild(xButton);

            list.appendChild(tag); // Add the tag to the list
            input.value = ""; // Clear the input field
            updatePL(list); // Update hidden input after adding the tag
        }
    }

    // Update the hidden input with the current tags in the list
    function updatePL(list) {

        // Convert the list of tags to a comma-separated string
        const csv = Array.from(list.children).map(tag => tag.textContent.replace(/\u00D7/g, "").trim()).join(",");

        // Set the value of the hidden input to the comma-separated string
        const hiddenInput = document.getElementById("@Html.IdFor(m => m.Skill.ProgLang)");
        hiddenInput.value = csv;
    }

    // Function triggered when a key is pressed down
    function onKeyOS(event) {

        // Check if the Enter key was pressed
        if (event.keyCode === 13) {
            event.preventDefault(); // Prevent form submission

            // Gets the input element and the list element from data attributes
            const input = event.target;
            const listSelector = input.getAttribute("data-list-selector");
            const list = document.querySelector(listSelector);

            // Creates a new tag element and add it to the list
            const tag = document.createElement("li");
            tag.classList.add("tag");
            tag.textContent = input.value;

            // Creates a button to remove the tag and add it to the tag element
            const xButton = document.createElement("button");
            xButton.classList.add("tag-close-btn");
            xButton.innerHTML = "&times;";
            xButton.addEventListener("click", function () {
                const tagToRemove = this.parentNode;
                tagToRemove.parentNode.removeChild(tagToRemove);
                updateHiddenInput(list); // Update hidden input after removing the tag
            });
            tag.appendChild(xButton);

            list.appendChild(tag); // Add the tag to the list
            input.value = ""; // Clear the input field
            updateOS(list); // Update hidden input after adding the tag
        }
    }

    // Update the hidden input with the current tags in the list
    function updateOS(list) {

        // Convert the list of tags to a comma-separated string
        const csv = Array.from(list.children).map(tag => tag.textContent.replace(/\u00D7/g, "").trim()).join(",");

        // Set the value of the hidden input to the comma-separated string
        const hiddenInput = document.getElementById("@Html.IdFor(m => m.Skill.OS)");
        hiddenInput.value = csv;
    }

    // Function triggered when a key is pressed down
    function onKeySNF(event) {

        // Check if the Enter key was pressed
        if (event.keyCode === 13) {
            event.preventDefault(); // Prevent form submission

            // Gets the input element and the list element from data attributes
            const input = event.target;
            const listSelector = input.getAttribute("data-list-selector");
            const list = document.querySelector(listSelector);

            // Creates a new tag element and add it to the list
            const tag = document.createElement("li");
            tag.classList.add("tag");
            tag.textContent = input.value;

            // Creates a button to remove the tag and add it to the tag element
            const xButton = document.createElement("button");
            xButton.classList.add("tag-close-btn");
            xButton.innerHTML = "&times;";
            xButton.addEventListener("click", function () {
                const tagToRemove = this.parentNode;
                tagToRemove.parentNode.removeChild(tagToRemove);
                updateHiddenInput(list); // Update hidden input after removing the tag
            });
            tag.appendChild(xButton);

            list.appendChild(tag); // Add the tag to the list
            input.value = ""; // Clear the input field
            updateSNF(list); // Update hidden input after adding the tag
        }
    }

    // Update the hidden input with the current tags in the list
    function updateSNF(list) {

        // Convert the list of tags to a comma-separated string
        const csv = Array.from(list.children).map(tag => tag.textContent.replace(/\u00D7/g, "").trim()).join(",");

        // Set the value of the hidden input to the comma-separated string
        const hiddenInput = document.getElementById("@Html.IdFor(m => m.Skill.SoftAndFrame)");
        hiddenInput.value = csv;
    }

    // Function triggered when a key is pressed down
    function onKeyO(event) {

        // Check if the Enter key was pressed
        if (event.keyCode === 13) {
            event.preventDefault(); // Prevent form submission

            // Gets the input element and the list element from data attributes
            const input = event.target;
            const listSelector = input.getAttribute("data-list-selector");
            const list = document.querySelector(listSelector);

            // Creates a new tag element and add it to the list
            const tag = document.createElement("li");
            tag.classList.add("tag");
            tag.textContent = input.value;

            // Creates a button to remove the tag and add it to the tag element
            const xButton = document.createElement("button");
            xButton.classList.add("tag-close-btn");
            xButton.innerHTML = "&times;";
            xButton.addEventListener("click", function () {
                const tagToRemove = this.parentNode;
                tagToRemove.parentNode.removeChild(tagToRemove);
                updateHiddenInput(list); // Update hidden input after removing the tag
            });
            tag.appendChild(xButton);

            list.appendChild(tag); // Add the tag to the list
            input.value = ""; // Clear the input field
            updateO(list); // Update hidden input after adding the tag
        }
    }

    // Update the hidden input with the current tags in the list
    function updateO(list) {

        // Convert the list of tags to a comma-separated string
        const csv = Array.from(list.children).map(tag => tag.textContent.replace(/\u00D7/g, "").trim()).join(",");

        // Set the value of the hidden input to the comma-separated string
        const hiddenInput = document.getElementById("@Html.IdFor(m => m.Skill.Other)");
        hiddenInput.value = csv;
    }
</script>


<!-- Configurable list script for experience -->
<script>
    function addExperience() {
        var ul = document.querySelector("#experience-ul"); // The list element
        var employerInput = document.getElementById("Work_Employer"); // Input field for employer name
        var jobTitleInput = document.getElementById("Work_JobTitle"); // Input field for job title
        var startDateInput = document.getElementById("Work_StartDate"); // Input field for start date
        var endDateInput = document.getElementById("Work_EndDate"); // Input field for end date
        var presentCheckbox = document.querySelector("#present-checkbox"); // Present employer checkbox
        var hiddenInput = document.querySelector("#hidden-experience-list"); // Hidden input field for experience list

        // Creates new list item to hold experience details
        var li = document.createElement("li");

        // Creates paragraph element for employer name and adds it to list
        var company = document.createElement("p");
        company.appendChild(document.createTextNode("WorkEmployer: " + employerInput.value));
        li.appendChild(company);

        // Creates paragraph element for job title and adds it to list
        var jobTitle = document.createElement("p");
        jobTitle.appendChild(document.createTextNode("Job Title: " + jobTitleInput.value));
        li.appendChild(jobTitle);

        // Creates paragraph element for start date and adds it to list
        var startDate = document.createElement("p");
        startDate.appendChild(document.createTextNode("Start Date: " + startDateInput.value));
        li.appendChild(startDate);

        // Creates paragraph element for end date and adds it to list
        var endDate = document.createElement("p");
        if (presentCheckbox.checked) {
            endDate.appendChild(document.createTextNode("End Date: Present Employer"));
        } else {
            endDate.appendChild(document.createTextNode("End Date: " + endDateInput.value));
        }
        li.appendChild(endDate);

        // Adds new list item to experience list
        ul.appendChild(li);

        // Adds new experience to hidden input field
        var experience = employerInput.value + "|" + jobTitleInput.value + "|" + startDateInput.value + "|" + endDateInput.value + "|" + presentCheckbox.checked;
        hiddenInput.value += experience + ";";

        // Clears input fields and checkbox
        employerInput.value = "";
        jobTitleInput.value = "";
        startDateInput.value = "";
        endDateInput.value = "";
        presentCheckbox.checked = false;
    }

    function removeLastExperience() {
        var ul = document.querySelector("#experience-ul");
        var li = document.querySelector("#experience-ul li:last-child");
        var hiddenInput = document.querySelector("#hidden-experience-list"); // Hidden input field for experience list
        var experiences = hiddenInput.value.split(";"); // Splits experiences by semicolon
        var lastExperience = experiences.pop(); // Removes last experience
        hiddenInput.value = experiences.join("|") + "|" // Updates hidden input field
        ul.removeChild(li);
    }</script>

<!-- Configurable list script for education-->
<script>
    function addEducation() {
        var ul = document.querySelector("#education-ul"); // The list element
        var institutionInput = document.getElementById("Education_Institution"); // Input field for institution name
        var degreeInput = document.getElementById("Education_Degree"); // Input field for degree
        var fieldInput = document.getElementById("Education_Field"); // Input field for field
        var startDateInput = document.getElementById("Education_StartDate"); // Input field for start date
        var endDateInput = document.getElementById("Education_EndDate"); // Input field for end date
        var currentlyCheckbox = document.querySelector("#currently-checkbox"); // Currently enrolled checkbox
        var hiddenInput = document.querySelector("#hidden-education-list"); // Hidden input field for education list

        // Creates new list item to hold education details
        var li = document.createElement("li");

        // Creates paragraph element for institution and adds it to list
        var institution = document.createElement("p");
        institution.appendChild(document.createTextNode("Institution: " + institutionInput.value));
        li.appendChild(institution);

        // Creates paragraph element for degree and adds it to list
        var degree = document.createElement("p");
        degree.appendChild(document.createTextNode("Degree: " + degreeInput.value));
        li.appendChild(degree);

        // Creates paragraph element for field and adds it to list
        var field = document.createElement("p");
        field.appendChild(document.createTextNode("Field: " + fieldInput.value));
        li.appendChild(field);

        // Creates paragraph element for start date and adds it to list
        var startDate = document.createElement("p");
        startDate.appendChild(document.createTextNode("Start Date: " + startDateInput.value));
        li.appendChild(startDate);

        // Creates paragraph element for end date and adds it to list
        var endDate = document.createElement("p");
        if (currentlyCheckbox.checked) {
            endDate.appendChild(document.createTextNode("End Date: Currently Enrolled"));
        } else {
            endDate.appendChild(document.createTextNode("End Date: " + endDateInput.value));
        }
        li.appendChild(endDate);

        // Adds new list item to education list
        ul.appendChild(li);

        // Adds new education to hidden input field
        var education = institutionInput.value + "|" + degreeInput.value + "|" + fieldInput.value + "|" + startDateInput.value + "|" + endDateInput.value + "|" + currentlyCheckbox.checked;
        hiddenInput.value += education + ";";

        // Clears input fields and checkbox
        institutionInput.value = "";
        degreeInput.value = "";
        fieldInput.value = "";
        startDateInput.value = "";
        endDateInput.value = "";
        currentlyCheckbox.checked = false;
    }

    function removeLastEducation() {
        var ul = document.querySelector("#education-ul");
        var li = document.querySelector("#education-ul li:last-child");
        var hiddenInput = document.querySelector("#hidden-education-list"); // Hidden input field for education list
        var educations = hiddenInput.value.split(";"); // Splits educations by semicolon
        var lastEducation = educations.pop(); // Removes last education
        hiddenInput.value = educations.join("|") + "|" // Updates hidden input field
        ul.removeChild(li);
    }</script>

<!-- Configurable list script for certification-->
<script>
    function addCertification() {
        var ul = document.querySelector("#certification-ul"); // The visible certification list element
        var institutionInput = document.getElementById("Certification_Institution"); // Input field for institution name
        var certificateInput = document.getElementById("Certification_Certificate"); // Input field for certificate
        var startDateInput = document.getElementById("Certification_StartDate"); // Input field for start date
        var endDateInput = document.getElementById("Certification_EndDate"); // Input field for end date
        var currentCheckbox = document.querySelector("#current-checkbox"); // Present employer checkbox
        var hiddenInput = document.querySelector("#hidden-certification-list"); // Hidden input field for certification list

        // Creates new list item to hold certification details
        var li = document.createElement("li");

        // Creates paragraph element for institution and adds it to list
        var institution = document.createElement("p");
        institution.appendChild(document.createTextNode("Institution: " + institutionInput.value));
        li.appendChild(institution);

        // Creates paragraph element for certificate and adds it to list
        var certificate = document.createElement("p");
        certificate.appendChild(document.createTextNode("Certificate: " + certificateInput.value));
        li.appendChild(certificate);

        // Creates paragraph element for start date and adds it to list
        var startDate = document.createElement("p");
        startDate.appendChild(document.createTextNode("Start Date: " + startDateInput.value));
        li.appendChild(startDate);

        // Creates paragraph element for end date and adds it to list
        var endDate = document.createElement("p");
        if (currentCheckbox.checked) {
            endDate.appendChild(document.createTextNode("End Date: Currently Enrolled"));
        } else {
            endDate.appendChild(document.createTextNode("End Date: " + endDateInput.value));
        }
        li.appendChild(endDate);

        //Adds new list item to certification list
        ul.appendChild(li);

        // Adds new certification to hidden input field
        var certification = institutionInput.value + "|" + certificateInput.value + "|" + startDateInput.value + "|" + endDateInput.value + "|" + currentCheckbox.checked;
        hiddenInput.value += certification + ";";

        // Clears input fields and checkbox
        institutionInput.value = "";
        certificateInput.value = "";
        startDateInput.value = "";
        endDateInput.value = "";
        currentCheckbox.checked = false;
    }

    function removeLastCertification() {
        var ul = document.querySelector("#certification-ul");
        var hiddenInput = document.querySelector("#hidden-certification-list"); // Hidden input field for certification list
        var certifications = hiddenInput.value.split(";"); // Splits certifications by semicolon
        var lastCertification = certifications.pop(); // Removes last certification
        hiddenInput.value = certifications.join("|") + "|" // Updates hidden input field
        var li = document.querySelector("#certification-ul li:last-child");
        ul.removeChild(li);
    }</script>

<!--Stops page from being submitted upon pressing enter-->
<script>
    const form = document.getElementById("myForm");
    form.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
            e.preventDefault();
        }
    });</script>
